import Pterosaur.RefinerTypes

variable [Monad m] [MonadState Theory m] [MonadExcept String m]

namespace RecordSpecExtender

def identity : RecordSpecExtender m n :=
  Œª _ ‚ü®_, Self‚ü© => return Self

def require (selfName? : Option String) (‚Ñì : Name) (tacA : TermChecker m (n+1)) (tacM? : Option (TermChecker m (n+1))) : RecordSpecExtender m n :=
  Œª Œì ‚ü®sort, Self‚ü© => do
  if List.contains (Self.map Prod.fst) ‚Ñì
  then throw s!"RecordSpec.require: duplicate method specification {‚Ñì}"
  let tpSelf := Value.rcdTp none selfName? Self
  let x := fresh n tpSelf
  let Œì' := Œì.ext selfName? tpSelf x
  let type ‚Üê tacA Œì' sort
  let manifest? ‚Üê
    tacM?.mapM Œª tacM => do
    let vtype := type.eval (‚Üê get) Œì'.values;
    let term ‚Üê tacM Œì' vtype
    pure ‚ü®Œì.values, term‚ü©
  return Self ++ [‚ü®‚Ñì, ‚ü®Œì.values, type‚ü©, manifest?‚ü©]

def append (tac1 : RecordSpecExtender m n) (tac2 : RecordSpecExtender m n) : RecordSpecExtender m n :=
  Œª Œì ‚ü®sort, Self‚ü© => do
  let dict1 ‚Üê tac1 Œì ‚ü®sort, Self‚ü©
  tac2 Œì ‚ü®sort, dict1‚ü©

def splice (selfName? : Option String) (target : Name) (tacType : TermChecker m (n+1)) : RecordSpecExtender m n :=
  Œª Œì ‚ü®sort, Self‚ü© => do
  if List.contains (Self.map Prod.fst) target
  then throw s!"RecordSpec.splice: duplicate method specification {target}"
  let tpSelf := Value.rcdTp none selfName? Self
  let x := fresh n tpSelf
  let Œì' := Œì.ext selfName? tpSelf x
  let typex ‚Üê tacType Œì' sort
  let ùïã ‚Üê get
  let vtypex := typex.eval ùïã Œì'.values
  match vtypex.destructRcdTp with
  | none => throw s!"RecordSpec.splice: expected locale type"
  | some ‚ü®none, _, _‚ü© => throw s!"RecordSpec.splice: expected locale type"
  | some ‚ü®locale?, innerSelf?, specx‚ü© =>
    let purified := specx.purify

    let rec loop (Self : RecordSpec) : Closure.Dict ‚Üí m RecordSpec
    | [] => do
      let fullManifest :=
        purified.partialManifest.append ‚àò purified.methods.map $ Œª ‚ü®‚Ñì,_‚ü© =>
        ‚ü®‚Ñì, ‚ü®Œì'.values, .call (.localVar (.pop .top)) ‚Ñì‚ü©‚ü©
      let refinedSumType := vtypex.refine ùïã innerSelf? specx fullManifest
      let tmRefinedSumType := refinedSumType.whnf.quote ùïã
      let manifestObj := Value.obj locale? innerSelf? fullManifest []
      let tmManifestObj := manifestObj.quote ùïã
      pure $ Self ++ [‚ü®target, ‚ü®‚ü®Œì.values, tmRefinedSumType‚ü©, some ‚ü®Œì.values, tmManifestObj‚ü©‚ü©‚ü©]

    | ‚ü®‚Ñì, A‚ü© :: rest =>
      if List.contains (Self.map Prod.fst) ‚Ñì
      then throw s!"RecordSpec.splice: duplicate method specification {‚Ñì}"
      else do loop (Self ++ [‚ü®‚Ñì, ‚ü®A, none‚ü©‚ü©]) rest

    loop Self purified.methods
