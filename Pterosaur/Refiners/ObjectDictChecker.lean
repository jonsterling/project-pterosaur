import Pterosaur.RefinerTypes

variable [Monad m] [MonadState Theory m] [MonadExcept String m]

def checkObjectDict (selfName? : Option String) (tacs : List (Name √ó TermChecker m (n+1))) : ObjectDictChecker m n :=
  Œª Œì =>
  let rec loop (spec : RecordSpec) (manifests primaries : Closure.Dict) tacs : RecordSpec ‚Üí m (Term.Dict (n+1) √ó Term.Dict (n+1))
  | [] =>
    if Std.HashMap.isEmpty tacs then do
      let ùïã ‚Üê get
      return ‚ü®manifests.quote ùïã selfName?, primaries.quote ùïã selfName?‚ü©
    else throw s!"Redundant methods encountered: {tacs.keys}"
  | ‚ü®‚Ñì, cell‚ü© :: methods =>
    match cell.manifest?, tacs[‚Ñì]? with
    | none, none => throw s!"Missing implementation of method {‚Ñì}"
    | some _, some _ => throw s!"Redundant implementation of method {‚Ñì}"
    | some clo, none => do
      loop (spec ++ [‚ü®‚Ñì, cell‚ü©]) (manifests ++ [‚ü®‚Ñì, clo‚ü©]) primaries (tacs.erase ‚Ñì) methods
    | none, some tac => do
      let x := freshTranslucent n $ .obj none selfName? manifests primaries
      let typex := cell.type.inst (‚Üê get) x
      let tmx ‚Üê tac (Œì.ext selfName? (.rcdTp none selfName? spec) x) typex
      let clo := ‚ü®Œì.values, tmx‚ü©
      let cell := {cell with manifest? := some clo}
      loop (spec ++ [‚ü®‚Ñì, cell‚ü©]) manifests (primaries ++ [‚ü®‚Ñì, clo‚ü©]) (tacs.erase ‚Ñì) methods
  loop [] [] [] $ Std.HashMap.ofList tacs
